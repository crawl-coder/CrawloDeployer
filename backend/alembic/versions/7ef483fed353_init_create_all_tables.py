"""init: create all tables

Revision ID: 7ef483fed353
Revises: 
Create Date: 2025-07-31 18:29:16.040178

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7ef483fed353'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cp_nodes',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('hostname', sa.String(length=100), nullable=False),
    sa.Column('ip_address', sa.String(length=50), nullable=True),
    sa.Column('status', sa.Enum('ONLINE', 'OFFLINE', name='node_status_enum'), nullable=False),
    sa.Column('last_heartbeat', sa.DateTime(), nullable=True),
    sa.Column('registered_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('cpu_cores', sa.Integer(), nullable=True, comment='CPU 核心数'),
    sa.Column('memory_gb', sa.Float(), nullable=True, comment='内存大小（GB）'),
    sa.Column('disk_gb', sa.Float(), nullable=True, comment='磁盘大小（GB）'),
    sa.Column('version', sa.String(length=20), nullable=True, comment='Worker 版本'),
    sa.Column('tags', sa.String(length=100), nullable=True, comment='节点标签，如 gpu,proxy'),
    sa.Column('max_concurrency', sa.Integer(), nullable=False, comment='最大并发任务数'),
    sa.Column('current_concurrency', sa.Integer(), nullable=False, comment='当前运行任务数'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cp_nodes_hostname'), 'cp_nodes', ['hostname'], unique=True)
    op.create_index(op.f('ix_cp_nodes_id'), 'cp_nodes', ['id'], unique=False)
    op.create_table('cp_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cp_users_email'), 'cp_users', ['email'], unique=True)
    op.create_index(op.f('ix_cp_users_id'), 'cp_users', ['id'], unique=False)
    op.create_index(op.f('ix_cp_users_username'), 'cp_users', ['username'], unique=True)
    op.create_table('cp_projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('package_path', sa.String(length=255), nullable=True, comment='爬虫部署包在服务器上的相对路径'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('DEVELOPING', 'ONLINE', 'OFFLINE', name='project_status_enum'), nullable=False),
    sa.Column('version', sa.String(length=20), nullable=True),
    sa.Column('entrypoint', sa.String(length=100), nullable=False, comment='入口脚本'),
    sa.Column('has_requirements', sa.Boolean(), nullable=False, comment='是否有 requirements.txt'),
    sa.Column('env_template', sa.JSON(), nullable=True, comment='环境变量模板'),
    sa.ForeignKeyConstraint(['owner_id'], ['cp_users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cp_projects_id'), 'cp_projects', ['id'], unique=False)
    op.create_index(op.f('ix_cp_projects_name'), 'cp_projects', ['name'], unique=True)
    op.create_table('cp_tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('project_id', sa.Integer(), nullable=False),
    sa.Column('spider_name', sa.String(length=100), nullable=False),
    sa.Column('cron_expression', sa.String(length=50), nullable=True, comment='CRON表达式'),
    sa.Column('args', sa.JSON(), nullable=True, comment='执行参数'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'MEDIUM', 'HIGH', name='task_priority_enum'), nullable=False),
    sa.Column('timeout_seconds', sa.Integer(), nullable=True, comment='任务超时时间'),
    sa.Column('max_retries', sa.Integer(), nullable=False, comment='失败后最大重试次数'),
    sa.Column('notify_on_failure', sa.Boolean(), nullable=False, comment='失败时通知'),
    sa.Column('notify_on_success', sa.Boolean(), nullable=False, comment='成功时通知'),
    sa.Column('notification_emails', sa.JSON(), nullable=True, comment='通知邮箱列表'),
    sa.Column('last_run_status', sa.Enum('PENDING', 'RUNNING', 'SUCCESS', 'FAILURE', name='task_run_status_enum'), nullable=True, comment='最近一次执行状态'),
    sa.Column('last_run_time', sa.DateTime(), nullable=True, comment='最近一次执行时间'),
    sa.Column('parent_task_id', sa.Integer(), nullable=True, comment='父任务ID'),
    sa.Column('dependency_task_ids', sa.JSON(), nullable=True, comment='依赖任务ID列表'),
    sa.ForeignKeyConstraint(['parent_task_id'], ['cp_tasks.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['cp_projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cp_tasks_id'), 'cp_tasks', ['id'], unique=False)
    op.create_table('cp_task_runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('celery_task_id', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'SUCCESS', 'FAILURE', name='task_run_status_enum'), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('log_output', sa.Text(), nullable=True),
    sa.Column('worker_node', sa.String(length=100), nullable=True),
    sa.Column('exit_code', sa.Integer(), nullable=True, comment='进程退出码'),
    sa.Column('cpu_usage', sa.Float(), nullable=True, comment='CPU 使用率 (%)'),
    sa.Column('memory_usage_mb', sa.Float(), nullable=True, comment='内存使用 (MB)'),
    sa.Column('duration_seconds', sa.Float(), nullable=True, comment='执行时长'),
    sa.Column('items_scraped', sa.Integer(), nullable=True, comment='抓取条数'),
    sa.Column('requests_count', sa.Integer(), nullable=True, comment='请求数'),
    sa.Column('result_size_mb', sa.Float(), nullable=True, comment='结果数据大小 (MB)'),
    sa.Column('manually_stopped', sa.Boolean(), nullable=False, comment='是否被手动停止'),
    sa.Column('node_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['cp_nodes.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['cp_tasks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cp_task_runs_celery_task_id'), 'cp_task_runs', ['celery_task_id'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_cp_task_runs_celery_task_id'), table_name='cp_task_runs')
    op.drop_table('cp_task_runs')
    op.drop_index(op.f('ix_cp_tasks_id'), table_name='cp_tasks')
    op.drop_table('cp_tasks')
    op.drop_index(op.f('ix_cp_projects_name'), table_name='cp_projects')
    op.drop_index(op.f('ix_cp_projects_id'), table_name='cp_projects')
    op.drop_table('cp_projects')
    op.drop_index(op.f('ix_cp_users_username'), table_name='cp_users')
    op.drop_index(op.f('ix_cp_users_id'), table_name='cp_users')
    op.drop_index(op.f('ix_cp_users_email'), table_name='cp_users')
    op.drop_table('cp_users')
    op.drop_index(op.f('ix_cp_nodes_id'), table_name='cp_nodes')
    op.drop_index(op.f('ix_cp_nodes_hostname'), table_name='cp_nodes')
    op.drop_table('cp_nodes')
    # ### end Alembic commands ###